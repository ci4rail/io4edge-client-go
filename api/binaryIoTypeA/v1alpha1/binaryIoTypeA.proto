/*
Copyright Â© 2021 Ci4Rail GmbH <engineering@ci4rail.com>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
syntax = "proto3";

package binaryIoTypeA;
option go_package = "binaryIoTypeA/v1alpha1";

// ============= ConfigurationControl =================

// ConfigurationControlSet to pass to Functionblock.ConfigurationControl.functionSpecificConfigurationControlSet hook
message ConfigurationControlSet {
    // Map to enable fritting on binary output channels. This activates a cyclically higher current at the channel outputs to prevent corrison over time
    // LSB is Output0, 1: fritting enabled, 0: disabled
    sfixed32 outputFrittingMask = 1;
    // Map to enable the output watchdog for binary output channels. The output watchdog is activated if the output is not updated for a certain time.
    // LSB is Output0, 1: output watchdog enabled, 0: disabled
    sfixed32 outputWatchdogMask = 2;
    // The output watchdog timeout in seconds.
    sfixed32 outputWatchdogTimeout = 3;
}

// ConfigurationControlSetResponse to pass to Functionblock.ConfigurationControl.functionSpecificConfigurationControlSetResponse hook
message ConfigurationControlSetResponse {
    // no parameters
}

// ConfigurationControlGet to pass to Functionblock.ConfigurationControl.functionSpecificConfigurationControlGet hook
message ConfigurationControlGet {
    // no parameters
}

// ConfigurationControlGetResponse to pass to Functionblock.ConfigurationGetResponse.functionSpecificConfigurationControlGetResponse hook
// Returns the current hardware configuration
message ConfigurationControlGetResponse {
    // Enabled fritting on output channels, see ConfigurationControlSet
    // LSB is Output0, 1: fritting enabled, 0: disabled
    fixed32 outputFrittingMask = 1;
    // Enabled output watchdog for binary output channels, see ConfigurationControlSet
    // LSB is Output0, 1: output watchdog enabled, 0: disabled
    fixed32 outputWatchdogMask = 2;
    // The output watchdog timeout in seconds, see ConfigurationControlSet
    sfixed32 outputWatchdogTimeout = 3;
}

// ConfigurationControlDescribe to pass to Functionblock.ConfigurationControl.functionSpecificConfigurationControlDescribe hook 
message ConfigurationControlDescribe {
    // no parameters
}

message ConfigurationControlDescribeResponse {
    fixed32 numberOfChannels = 1;
}

// ConfigurationControlResponse to pass to Functionblock.ConfigurationControlResponse.functionSpecificConfigurationControlResponse hook
message ConfigurationControlResponse {
    oneof type {
        ConfigurationControlGetResponse get = 1;
        ConfigurationControlSetResponse set = 2;
        ConfigurationControlDescribeResponse describe = 3;
    }
}


// ============= FunctionControl =================
// Sets the value of a single binary channel
message SetSingle {
    // Number of the binary output channel
    fixed32 channel = 1;
    // State of the binary output channel
    bool state = 2;
}

// Sets all binary channels
message SetAll {
    // binary coded map of input values. 0 means low, 1 means high, LSB is Output0
    fixed32 values = 1;
    // mask to define which channels are affected by the set all command. 0 means not set, 1 means set, LSB is Output0
    fixed32 mask = 2;
}

// Gets the current value of a single binary channel
message GetSingle {
    // Specifies the binary input channel
    fixed32 channel = 1;
}

// Gets the values of all binary channels
message GetAll {
        // mask to define which channels are affected by the get all command. 0 means not set, 1 means set, LSB is Output0
        fixed32 mask = 1;
}

// FunctionControlGet to pass to Functionblock.FunctionControl.functionSpecificFunctionControlGet hook
message FunctionControlGet {
    oneof type {
        GetSingle single = 1;
        GetAll all = 2;
    }
}

// FunctionControlSet to pass to Functionblock.FunctionControl.functionSpecificFunctionControlSet hook
message FunctionControlSet {
    oneof type {
        SetSingle single = 1;
        SetAll all = 2;
    }
}

message SetAllResponse {
    // no parameters
}

message SetSingleResponse {
    // no parameters
}

message GetAllResponse {
    // binary coded map of input values. 0 means low, 1 means high, LSB is Input0
    fixed32 inputs = 1;
    // binary coded map of errors for each input. 0 means no error, 1 means error, LSB is Input0
    fixed32 error_status = 2;
}

message GetSingleResponse {
    // Number of the binary input channel
    fixed32 channel = 1;
    // State for the bianry input channel
    bool state = 2;
}


// FunctionControlResponse to pass to Functionblock.FunctionControlResponse.functionSpecificFunctionControlResponse hook
message FunctionControlResponse {
    oneof type {
        GetSingleResponse getSingle = 1;
        GetAllResponse getAll = 2;
        SetSingleResponse setSingle = 3;
        SetAllResponse setAll = 4;
    }
}

// ============= StreamControl ==================
// StreamControlStart to pass to Functionblock.StreamControlStart.functionSpecificStreamControlStart hook
message StreamControlStart {
    // mask to define which channels are considered in the stream. 0 means don't send channels value, 1 means sent it
    // LSB is Input0
    // Defaults to all channels (0x0F)
    fixed32 channelFilterMask = 1;

    // maximum interval in seconds between two stream messages. If there are no or very few stream messages for a 
    // certain time, the client is informed that the stream is still active and the existing data is transmitted.
    // Defaults to 10 seconds
    fixed32 keepaliveInterval = 2;

    // internal ring buffer size. 
    // Defaults to 50
    // Maximum is 1000
    fixed32 bufferSize = 3;
}

message Sample {
    // Timestamp for that specific channels sample. This is the time the sample was taken.
    // This timestamp is in microseconds since the start of the device and does not get synchronized with the clients time.
    fixed64 timestamp = 1;
    // Specifies the binary channel
    fixed32 channel = 2;
    // Specifies the binary channel value when the input value has changed.
    bool value = 3;
}

// StreamData to pass to Functionblock.StreamData.functionSpecificStreamData hook
message StreamData {
    repeated Sample samples = 1;
}
