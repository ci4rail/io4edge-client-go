/*
Copyright Â© 2021 Ci4Rail GmbH <engineering@ci4rail.com>

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
syntax = "proto3";

package iou01;
option go_package = "iou01/v1alpha1";

// ============= ENUMS ==========================
enum AnalogChannel {
    AnalogChannel0 = 0;
    AnalogChannel1 = 1;
    AnalogChannel2 = 2;
    AnalogChannel3 = 3;
}

enum BinaryOutput {
    BinaryOutput0 = 0;
    BinaryOutput1 = 1;
    BinaryOutput2 = 2;
    BinaryOutput3 = 3;
}

enum BinaryInput {
    BinaryInput0 = 0;
    BinaryInput1 = 1;
    BinaryInput2 = 2;
    BinaryInput3 = 3;
}

// ============= Configuration =================
// Sets the configuration for the sample rate of one specific analog channel
message HardwareConfigurationAnalogSampleRate {
    // Number of the analog channel to configure
    AnalogChannel channel = 1;
    // Sample rate in Hz
    fixed32 sampleRate = 2;
}

// HardwareConfiguration to pass to Functionblock.ConfigurationControl.functionSpecificHardwareConfiguration hook
message HardwareConfiguration {
    // The measurement frequency (sampling rate) of the analog inputs
    repeated HardwareConfigurationAnalogSampleRate analogSampleRate = 1;
    // Map to enable fritting on binary output channels. This activates a cyclically higher current at the channel outputs to prevent corrison over time
    // LSB is Output0, 1: fritting enabled, 0: fritting disabled
    fixed32 binaryOutputFrittingMap = 2;
}

// HardwareConfigurationResponse to pass to Functionblock.HardwareConfigurationResponse.functionSpecificHardwareConfigurationResponse hook
// Returns the current hardware configuration
message HardwareConfigurationResponse {
    // The measurement frequency (sampling rate) of the analog inputs
    repeated HardwareConfigurationAnalogSampleRate analogSampleRate = 1;
    // Map to enable fritting on output channels. This activates a cyclically higher current at the channel outputs to prevent corrison over time
    fixed32 fritting = 2;
}

// ============= FunctionControl =================
// Sets the value of a single binary channel
message SetSingle {
    // Number of the binary output channel
    BinaryOutput channel = 1;
    // State of the binary output channel
    bool state = 2;
}

// Sets all binary channels
message SetAll {
    // binary coded map of input values. 0 means low, 1 means high, LSB is Output0
    fixed32 values = 1;
}

// Gets the current value of a single binary channel
message GetSingle {
    // Specifies the binary input channel
    BinaryInput channel = 1;
}

// Gets the values of all binary channels
message GetAll {
    // no parameters
}

// FunctionControlGet to pass to Functionblock.FunctionControl.functionSpecificFunctionControlGet hook
message FunctionControlGet {
    oneof type {
        GetSingle single = 1;
        GetAll all = 2;
    }
}

// FunctionControlSet to pass to Functionblock.FunctionControl.functionSpecificFunctionControlSet hook
message FunctionControlSet {
    oneof type {
        SetSingle single = 1;
        SetAll all = 2;
    }
}

message SetAllResponse {
    // no parameters
}

message SetSingleResponse {
    // no parameters
}

message GetAllResponse {
    // binary coded map of input values. 0 means low, 1 means high, LSB is Input0
    fixed32 inputs = 2;
}

message GetSingleResponse {
    // Number of the binary input channel
    BinaryInput channel = 1;
    // State for the bianry input channel
    bool state = 2;
}

// FunctionControlResponse to pass to Functionblock.FunctionControlResponse.functionSpecificFunctionControlResponse hook
message FunctionControlResponse {
    oneof type {
        GetSingleResponse getSingle = 1;
        GetAllResponse getAll = 2;
        SetSingleResponse setSingle = 3;
        SetAllResponse setAll = 4;
    }
}

// ============= StreamControl ==================
// StreamControlStart to pass to Functionblock.StreamControl.functionSpecificStreamControlStart hook
message StreamControlStart {
    // Starts the stream for configured analog input channels.
    // LSB is AnalogInput0, 1: stream enabled for channel, 0: stream disabled for channel
    fixed32 analogInputsEnableMap = 1;
}

message AnalogSample {
    // Timestamp for that specific channels sample
    fixed64 timestamp = 1;
    // Specifies the analog channel
    AnalogChannel channel = 2;
    // Value ranges between: -32,768 (-10V) to 32,767 (+10V)
    sfixed32 value = 3;
    // Indicates if the value is valid or invalid (out of range). 
    // true: value is valud, false: value is invalid
    bool valid = 4;
}

// StreamResponse to pass to Functionblock.StreamResponse.functionSpecificStreamResponse hook
message StreamResponse {
    repeated AnalogSample samples = 1;
}
