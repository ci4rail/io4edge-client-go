//
//Copyright Â© 2021 Ci4Rail GmbH <engineering@ci4rail.com>
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.6.1
// source: analogInTypeA.proto

package v1alpha1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// ============= ConfigurationControl =================
// Sets the configuration for the sample rate of one specific analog channel
type ConfigurationSampleRate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of the analog channel to configure
	Channel uint32 `protobuf:"fixed32,1,opt,name=channel,proto3" json:"channel,omitempty"`
	// Enables the channel
	Enabled bool `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Sample rate in Hz
	SampleRate uint32 `protobuf:"fixed32,3,opt,name=sampleRate,proto3" json:"sampleRate,omitempty"`
}

func (x *ConfigurationSampleRate) Reset() {
	*x = ConfigurationSampleRate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analogInTypeA_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationSampleRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationSampleRate) ProtoMessage() {}

func (x *ConfigurationSampleRate) ProtoReflect() protoreflect.Message {
	mi := &file_analogInTypeA_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationSampleRate.ProtoReflect.Descriptor instead.
func (*ConfigurationSampleRate) Descriptor() ([]byte, []int) {
	return file_analogInTypeA_proto_rawDescGZIP(), []int{0}
}

func (x *ConfigurationSampleRate) GetChannel() uint32 {
	if x != nil {
		return x.Channel
	}
	return 0
}

func (x *ConfigurationSampleRate) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *ConfigurationSampleRate) GetSampleRate() uint32 {
	if x != nil {
		return x.SampleRate
	}
	return 0
}

// ConfigurationControlSet to pass to Functionblock.ConfigurationControl.functionSpecificConfigurationControlSet hook
type ConfigurationControlSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The measurement frequency (sampling rate) of the analog inputs
	SampleRate []*ConfigurationSampleRate `protobuf:"bytes,1,rep,name=sampleRate,proto3" json:"sampleRate,omitempty"`
}

func (x *ConfigurationControlSet) Reset() {
	*x = ConfigurationControlSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analogInTypeA_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationControlSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationControlSet) ProtoMessage() {}

func (x *ConfigurationControlSet) ProtoReflect() protoreflect.Message {
	mi := &file_analogInTypeA_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationControlSet.ProtoReflect.Descriptor instead.
func (*ConfigurationControlSet) Descriptor() ([]byte, []int) {
	return file_analogInTypeA_proto_rawDescGZIP(), []int{1}
}

func (x *ConfigurationControlSet) GetSampleRate() []*ConfigurationSampleRate {
	if x != nil {
		return x.SampleRate
	}
	return nil
}

// ConfigurationControlSetResponse to pass to Functionblock.ConfigurationControl.functionSpecificConfigurationControlSetResponse hook
type ConfigurationControlSetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConfigurationControlSetResponse) Reset() {
	*x = ConfigurationControlSetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analogInTypeA_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationControlSetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationControlSetResponse) ProtoMessage() {}

func (x *ConfigurationControlSetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_analogInTypeA_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationControlSetResponse.ProtoReflect.Descriptor instead.
func (*ConfigurationControlSetResponse) Descriptor() ([]byte, []int) {
	return file_analogInTypeA_proto_rawDescGZIP(), []int{2}
}

// ConfigurationControlGet to pass to Functionblock.ConfigurationControl.functionSpecificConfigurationControlGet hook
type ConfigurationControlGet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ConfigurationControlGet) Reset() {
	*x = ConfigurationControlGet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analogInTypeA_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationControlGet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationControlGet) ProtoMessage() {}

func (x *ConfigurationControlGet) ProtoReflect() protoreflect.Message {
	mi := &file_analogInTypeA_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationControlGet.ProtoReflect.Descriptor instead.
func (*ConfigurationControlGet) Descriptor() ([]byte, []int) {
	return file_analogInTypeA_proto_rawDescGZIP(), []int{3}
}

// ConfigurationControlGetResponse to pass to Functionblock.ConfigurationGetResponse.functionSpecificConfigurationControlGetResponse hook
// Returns the current hardware configuration
type ConfigurationControlGetResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The measurement frequency (sampling rate) of the analog inputs
	SampleRate []*ConfigurationSampleRate `protobuf:"bytes,1,rep,name=sampleRate,proto3" json:"sampleRate,omitempty"`
}

func (x *ConfigurationControlGetResponse) Reset() {
	*x = ConfigurationControlGetResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analogInTypeA_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationControlGetResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationControlGetResponse) ProtoMessage() {}

func (x *ConfigurationControlGetResponse) ProtoReflect() protoreflect.Message {
	mi := &file_analogInTypeA_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationControlGetResponse.ProtoReflect.Descriptor instead.
func (*ConfigurationControlGetResponse) Descriptor() ([]byte, []int) {
	return file_analogInTypeA_proto_rawDescGZIP(), []int{4}
}

func (x *ConfigurationControlGetResponse) GetSampleRate() []*ConfigurationSampleRate {
	if x != nil {
		return x.SampleRate
	}
	return nil
}

// ConfigurationControlResponse to pass to Functionblock.ConfigurationControlResponse.functionSpecificConfigurationControlResponse hook
type ConfigurationControlResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//	*ConfigurationControlResponse_Set
	//	*ConfigurationControlResponse_Get
	Type isConfigurationControlResponse_Type `protobuf_oneof:"type"`
}

func (x *ConfigurationControlResponse) Reset() {
	*x = ConfigurationControlResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analogInTypeA_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigurationControlResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigurationControlResponse) ProtoMessage() {}

func (x *ConfigurationControlResponse) ProtoReflect() protoreflect.Message {
	mi := &file_analogInTypeA_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigurationControlResponse.ProtoReflect.Descriptor instead.
func (*ConfigurationControlResponse) Descriptor() ([]byte, []int) {
	return file_analogInTypeA_proto_rawDescGZIP(), []int{5}
}

func (m *ConfigurationControlResponse) GetType() isConfigurationControlResponse_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *ConfigurationControlResponse) GetSet() *ConfigurationControlGetResponse {
	if x, ok := x.GetType().(*ConfigurationControlResponse_Set); ok {
		return x.Set
	}
	return nil
}

func (x *ConfigurationControlResponse) GetGet() *ConfigurationControlSetResponse {
	if x, ok := x.GetType().(*ConfigurationControlResponse_Get); ok {
		return x.Get
	}
	return nil
}

type isConfigurationControlResponse_Type interface {
	isConfigurationControlResponse_Type()
}

type ConfigurationControlResponse_Set struct {
	Set *ConfigurationControlGetResponse `protobuf:"bytes,1,opt,name=set,proto3,oneof"`
}

type ConfigurationControlResponse_Get struct {
	Get *ConfigurationControlSetResponse `protobuf:"bytes,2,opt,name=get,proto3,oneof"`
}

func (*ConfigurationControlResponse_Set) isConfigurationControlResponse_Type() {}

func (*ConfigurationControlResponse_Get) isConfigurationControlResponse_Type() {}

type GetSingle struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Specifies the analog input channel
	Channel uint32 `protobuf:"fixed32,1,opt,name=channel,proto3" json:"channel,omitempty"`
}

func (x *GetSingle) Reset() {
	*x = GetSingle{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analogInTypeA_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSingle) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSingle) ProtoMessage() {}

func (x *GetSingle) ProtoReflect() protoreflect.Message {
	mi := &file_analogInTypeA_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSingle.ProtoReflect.Descriptor instead.
func (*GetSingle) Descriptor() ([]byte, []int) {
	return file_analogInTypeA_proto_rawDescGZIP(), []int{6}
}

func (x *GetSingle) GetChannel() uint32 {
	if x != nil {
		return x.Channel
	}
	return 0
}

// Gets the values of all analog channels
type GetAll struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetAll) Reset() {
	*x = GetAll{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analogInTypeA_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAll) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAll) ProtoMessage() {}

func (x *GetAll) ProtoReflect() protoreflect.Message {
	mi := &file_analogInTypeA_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAll.ProtoReflect.Descriptor instead.
func (*GetAll) Descriptor() ([]byte, []int) {
	return file_analogInTypeA_proto_rawDescGZIP(), []int{7}
}

// FunctionControlGet to pass to Functionblock.FunctionControl.functionSpecificFunctionControlGet hook
type FunctionControlGet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//	*FunctionControlGet_Single
	//	*FunctionControlGet_All
	Type isFunctionControlGet_Type `protobuf_oneof:"type"`
}

func (x *FunctionControlGet) Reset() {
	*x = FunctionControlGet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analogInTypeA_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunctionControlGet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionControlGet) ProtoMessage() {}

func (x *FunctionControlGet) ProtoReflect() protoreflect.Message {
	mi := &file_analogInTypeA_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionControlGet.ProtoReflect.Descriptor instead.
func (*FunctionControlGet) Descriptor() ([]byte, []int) {
	return file_analogInTypeA_proto_rawDescGZIP(), []int{8}
}

func (m *FunctionControlGet) GetType() isFunctionControlGet_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *FunctionControlGet) GetSingle() *GetSingle {
	if x, ok := x.GetType().(*FunctionControlGet_Single); ok {
		return x.Single
	}
	return nil
}

func (x *FunctionControlGet) GetAll() *GetAll {
	if x, ok := x.GetType().(*FunctionControlGet_All); ok {
		return x.All
	}
	return nil
}

type isFunctionControlGet_Type interface {
	isFunctionControlGet_Type()
}

type FunctionControlGet_Single struct {
	Single *GetSingle `protobuf:"bytes,1,opt,name=single,proto3,oneof"`
}

type FunctionControlGet_All struct {
	All *GetAll `protobuf:"bytes,2,opt,name=all,proto3,oneof"`
}

func (*FunctionControlGet_Single) isFunctionControlGet_Type() {}

func (*FunctionControlGet_All) isFunctionControlGet_Type() {}

// FunctionControlSet to pass to Functionblock.FunctionControl.functionSpecificFunctionControlSet hook
type FunctionControlSet struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FunctionControlSet) Reset() {
	*x = FunctionControlSet{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analogInTypeA_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunctionControlSet) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionControlSet) ProtoMessage() {}

func (x *FunctionControlSet) ProtoReflect() protoreflect.Message {
	mi := &file_analogInTypeA_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionControlSet.ProtoReflect.Descriptor instead.
func (*FunctionControlSet) Descriptor() ([]byte, []int) {
	return file_analogInTypeA_proto_rawDescGZIP(), []int{9}
}

type SetAllResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetAllResponse) Reset() {
	*x = SetAllResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analogInTypeA_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetAllResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetAllResponse) ProtoMessage() {}

func (x *SetAllResponse) ProtoReflect() protoreflect.Message {
	mi := &file_analogInTypeA_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetAllResponse.ProtoReflect.Descriptor instead.
func (*SetAllResponse) Descriptor() ([]byte, []int) {
	return file_analogInTypeA_proto_rawDescGZIP(), []int{10}
}

type SetSingleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetSingleResponse) Reset() {
	*x = SetSingleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analogInTypeA_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetSingleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetSingleResponse) ProtoMessage() {}

func (x *SetSingleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_analogInTypeA_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetSingleResponse.ProtoReflect.Descriptor instead.
func (*SetSingleResponse) Descriptor() ([]byte, []int) {
	return file_analogInTypeA_proto_rawDescGZIP(), []int{11}
}

type GetAllResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// binary coded map of input values. 0 means low, 1 means high, LSB is Input0
	Samples []*Sample `protobuf:"bytes,1,rep,name=samples,proto3" json:"samples,omitempty"`
}

func (x *GetAllResponse) Reset() {
	*x = GetAllResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analogInTypeA_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetAllResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAllResponse) ProtoMessage() {}

func (x *GetAllResponse) ProtoReflect() protoreflect.Message {
	mi := &file_analogInTypeA_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAllResponse.ProtoReflect.Descriptor instead.
func (*GetAllResponse) Descriptor() ([]byte, []int) {
	return file_analogInTypeA_proto_rawDescGZIP(), []int{12}
}

func (x *GetAllResponse) GetSamples() []*Sample {
	if x != nil {
		return x.Samples
	}
	return nil
}

type GetSingleResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sample *Sample `protobuf:"bytes,1,opt,name=sample,proto3" json:"sample,omitempty"`
}

func (x *GetSingleResponse) Reset() {
	*x = GetSingleResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analogInTypeA_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetSingleResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetSingleResponse) ProtoMessage() {}

func (x *GetSingleResponse) ProtoReflect() protoreflect.Message {
	mi := &file_analogInTypeA_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetSingleResponse.ProtoReflect.Descriptor instead.
func (*GetSingleResponse) Descriptor() ([]byte, []int) {
	return file_analogInTypeA_proto_rawDescGZIP(), []int{13}
}

func (x *GetSingleResponse) GetSample() *Sample {
	if x != nil {
		return x.Sample
	}
	return nil
}

// FunctionControlResponse to pass to Functionblock.FunctionControlResponse.functionSpecificFunctionControlResponse hook
type FunctionControlResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//	*FunctionControlResponse_GetSingle
	//	*FunctionControlResponse_GetAll
	//	*FunctionControlResponse_SetSingle
	//	*FunctionControlResponse_SetAll
	Type isFunctionControlResponse_Type `protobuf_oneof:"type"`
}

func (x *FunctionControlResponse) Reset() {
	*x = FunctionControlResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analogInTypeA_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunctionControlResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionControlResponse) ProtoMessage() {}

func (x *FunctionControlResponse) ProtoReflect() protoreflect.Message {
	mi := &file_analogInTypeA_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionControlResponse.ProtoReflect.Descriptor instead.
func (*FunctionControlResponse) Descriptor() ([]byte, []int) {
	return file_analogInTypeA_proto_rawDescGZIP(), []int{14}
}

func (m *FunctionControlResponse) GetType() isFunctionControlResponse_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *FunctionControlResponse) GetGetSingle() *GetSingleResponse {
	if x, ok := x.GetType().(*FunctionControlResponse_GetSingle); ok {
		return x.GetSingle
	}
	return nil
}

func (x *FunctionControlResponse) GetGetAll() *GetAllResponse {
	if x, ok := x.GetType().(*FunctionControlResponse_GetAll); ok {
		return x.GetAll
	}
	return nil
}

func (x *FunctionControlResponse) GetSetSingle() *SetSingleResponse {
	if x, ok := x.GetType().(*FunctionControlResponse_SetSingle); ok {
		return x.SetSingle
	}
	return nil
}

func (x *FunctionControlResponse) GetSetAll() *SetAllResponse {
	if x, ok := x.GetType().(*FunctionControlResponse_SetAll); ok {
		return x.SetAll
	}
	return nil
}

type isFunctionControlResponse_Type interface {
	isFunctionControlResponse_Type()
}

type FunctionControlResponse_GetSingle struct {
	GetSingle *GetSingleResponse `protobuf:"bytes,1,opt,name=getSingle,proto3,oneof"`
}

type FunctionControlResponse_GetAll struct {
	GetAll *GetAllResponse `protobuf:"bytes,2,opt,name=getAll,proto3,oneof"`
}

type FunctionControlResponse_SetSingle struct {
	SetSingle *SetSingleResponse `protobuf:"bytes,3,opt,name=setSingle,proto3,oneof"`
}

type FunctionControlResponse_SetAll struct {
	SetAll *SetAllResponse `protobuf:"bytes,4,opt,name=setAll,proto3,oneof"`
}

func (*FunctionControlResponse_GetSingle) isFunctionControlResponse_Type() {}

func (*FunctionControlResponse_GetAll) isFunctionControlResponse_Type() {}

func (*FunctionControlResponse_SetSingle) isFunctionControlResponse_Type() {}

func (*FunctionControlResponse_SetAll) isFunctionControlResponse_Type() {}

// ============= StreamControl ==================
// StreamControlStart to pass to Functionblock.StreamControl.functionSpecificStreamControlStart hook
type StreamControlStart struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Starts the stream for configured analog input channels.
	// LSB is AnalogInput0, 1: stream enabled for channel, 0: stream disabled for channel
	AnalogInputsEnableMap uint32 `protobuf:"fixed32,1,opt,name=analogInputsEnableMap,proto3" json:"analogInputsEnableMap,omitempty"`
}

func (x *StreamControlStart) Reset() {
	*x = StreamControlStart{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analogInTypeA_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamControlStart) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamControlStart) ProtoMessage() {}

func (x *StreamControlStart) ProtoReflect() protoreflect.Message {
	mi := &file_analogInTypeA_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamControlStart.ProtoReflect.Descriptor instead.
func (*StreamControlStart) Descriptor() ([]byte, []int) {
	return file_analogInTypeA_proto_rawDescGZIP(), []int{15}
}

func (x *StreamControlStart) GetAnalogInputsEnableMap() uint32 {
	if x != nil {
		return x.AnalogInputsEnableMap
	}
	return 0
}

type Sample struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Timestamp for that specific channels sample
	Timestamp uint64 `protobuf:"fixed64,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// Specifies the analog channel
	Channel uint32 `protobuf:"fixed32,2,opt,name=channel,proto3" json:"channel,omitempty"`
	// Value ranges between: -32,768 (-10V) to 32,767 (+10V)
	Value int32 `protobuf:"fixed32,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Sample) Reset() {
	*x = Sample{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analogInTypeA_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sample) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sample) ProtoMessage() {}

func (x *Sample) ProtoReflect() protoreflect.Message {
	mi := &file_analogInTypeA_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sample.ProtoReflect.Descriptor instead.
func (*Sample) Descriptor() ([]byte, []int) {
	return file_analogInTypeA_proto_rawDescGZIP(), []int{16}
}

func (x *Sample) GetTimestamp() uint64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *Sample) GetChannel() uint32 {
	if x != nil {
		return x.Channel
	}
	return 0
}

func (x *Sample) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

// StreamData to pass to Functionblock.StreamData.functionSpecificStreamData hook
type StreamData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Samples []*Sample `protobuf:"bytes,1,rep,name=samples,proto3" json:"samples,omitempty"`
}

func (x *StreamData) Reset() {
	*x = StreamData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_analogInTypeA_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamData) ProtoMessage() {}

func (x *StreamData) ProtoReflect() protoreflect.Message {
	mi := &file_analogInTypeA_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamData.ProtoReflect.Descriptor instead.
func (*StreamData) Descriptor() ([]byte, []int) {
	return file_analogInTypeA_proto_rawDescGZIP(), []int{17}
}

func (x *StreamData) GetSamples() []*Sample {
	if x != nil {
		return x.Samples
	}
	return nil
}

var File_analogInTypeA_proto protoreflect.FileDescriptor

var file_analogInTypeA_proto_rawDesc = []byte{
	0x0a, 0x13, 0x61, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x41, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x61, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x41, 0x22, 0x6d, 0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07,
	0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x07, 0x52, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52,
	0x61, 0x74, 0x65, 0x22, 0x61, 0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x12, 0x46,
	0x0a, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x41, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x22, 0x21, 0x0a, 0x1f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x65,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x19, 0x0a, 0x17, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x47, 0x65, 0x74, 0x22, 0x69, 0x0a, 0x1f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x47, 0x65, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x46, 0x0a, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c,
	0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x61, 0x6e,
	0x61, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x41, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52,
	0x61, 0x74, 0x65, 0x52, 0x0a, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x61, 0x74, 0x65, 0x22,
	0xae, 0x01, 0x0a, 0x1c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x42, 0x0a, 0x03, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x61, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x41, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x47, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x03, 0x73, 0x65, 0x74, 0x12, 0x42, 0x0a, 0x03, 0x67, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x41, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x03, 0x67, 0x65, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0x25, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x07, 0x52, 0x07,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x22, 0x08, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x41, 0x6c,
	0x6c, 0x22, 0x7b, 0x0a, 0x12, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x47, 0x65, 0x74, 0x12, 0x32, 0x0a, 0x06, 0x73, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x6f, 0x67,
	0x49, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x41, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x48, 0x00, 0x52, 0x06, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x29, 0x0a, 0x03, 0x61,
	0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x6f,
	0x67, 0x49, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x41, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x48,
	0x00, 0x52, 0x03, 0x61, 0x6c, 0x6c, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x14,
	0x0a, 0x12, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f,
	0x6c, 0x53, 0x65, 0x74, 0x22, 0x10, 0x0a, 0x0e, 0x53, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x13, 0x0a, 0x11, 0x53, 0x65, 0x74, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x41, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a,
	0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x41, 0x2e, 0x53,
	0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x22, 0x42,
	0x0a, 0x11, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x41, 0x2e, 0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x06, 0x73, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x22, 0x97, 0x02, 0x0a, 0x17, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x40,
	0x0a, 0x09, 0x67, 0x65, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x41, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x09, 0x67, 0x65, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x12, 0x37, 0x0a, 0x06, 0x67, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x41,
	0x2e, 0x47, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x06, 0x67, 0x65, 0x74, 0x41, 0x6c, 0x6c, 0x12, 0x40, 0x0a, 0x09, 0x73, 0x65, 0x74,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x61,
	0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x41, 0x2e, 0x53, 0x65, 0x74,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00,
	0x52, 0x09, 0x73, 0x65, 0x74, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x73,
	0x65, 0x74, 0x41, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x61, 0x6e,
	0x61, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x41, 0x2e, 0x53, 0x65, 0x74, 0x41,
	0x6c, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x06, 0x73, 0x65,
	0x74, 0x41, 0x6c, 0x6c, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x4a, 0x0a, 0x12,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x61, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x07, 0x52, 0x15, 0x61, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x22, 0x56, 0x0a, 0x06, 0x53, 0x61, 0x6d, 0x70,
	0x6c, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x12, 0x18, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x07, 0x52, 0x07, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x3d, 0x0a, 0x0a, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2f,
	0x0a, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x61, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x41, 0x2e,
	0x53, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x52, 0x07, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x73, 0x42,
	0x18, 0x5a, 0x16, 0x61, 0x6e, 0x61, 0x6c, 0x6f, 0x67, 0x49, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x41,
	0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_analogInTypeA_proto_rawDescOnce sync.Once
	file_analogInTypeA_proto_rawDescData = file_analogInTypeA_proto_rawDesc
)

func file_analogInTypeA_proto_rawDescGZIP() []byte {
	file_analogInTypeA_proto_rawDescOnce.Do(func() {
		file_analogInTypeA_proto_rawDescData = protoimpl.X.CompressGZIP(file_analogInTypeA_proto_rawDescData)
	})
	return file_analogInTypeA_proto_rawDescData
}

var file_analogInTypeA_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_analogInTypeA_proto_goTypes = []interface{}{
	(*ConfigurationSampleRate)(nil),         // 0: analogInTypeA.ConfigurationSampleRate
	(*ConfigurationControlSet)(nil),         // 1: analogInTypeA.ConfigurationControlSet
	(*ConfigurationControlSetResponse)(nil), // 2: analogInTypeA.ConfigurationControlSetResponse
	(*ConfigurationControlGet)(nil),         // 3: analogInTypeA.ConfigurationControlGet
	(*ConfigurationControlGetResponse)(nil), // 4: analogInTypeA.ConfigurationControlGetResponse
	(*ConfigurationControlResponse)(nil),    // 5: analogInTypeA.ConfigurationControlResponse
	(*GetSingle)(nil),                       // 6: analogInTypeA.GetSingle
	(*GetAll)(nil),                          // 7: analogInTypeA.GetAll
	(*FunctionControlGet)(nil),              // 8: analogInTypeA.FunctionControlGet
	(*FunctionControlSet)(nil),              // 9: analogInTypeA.FunctionControlSet
	(*SetAllResponse)(nil),                  // 10: analogInTypeA.SetAllResponse
	(*SetSingleResponse)(nil),               // 11: analogInTypeA.SetSingleResponse
	(*GetAllResponse)(nil),                  // 12: analogInTypeA.GetAllResponse
	(*GetSingleResponse)(nil),               // 13: analogInTypeA.GetSingleResponse
	(*FunctionControlResponse)(nil),         // 14: analogInTypeA.FunctionControlResponse
	(*StreamControlStart)(nil),              // 15: analogInTypeA.StreamControlStart
	(*Sample)(nil),                          // 16: analogInTypeA.Sample
	(*StreamData)(nil),                      // 17: analogInTypeA.StreamData
}
var file_analogInTypeA_proto_depIdxs = []int32{
	0,  // 0: analogInTypeA.ConfigurationControlSet.sampleRate:type_name -> analogInTypeA.ConfigurationSampleRate
	0,  // 1: analogInTypeA.ConfigurationControlGetResponse.sampleRate:type_name -> analogInTypeA.ConfigurationSampleRate
	4,  // 2: analogInTypeA.ConfigurationControlResponse.set:type_name -> analogInTypeA.ConfigurationControlGetResponse
	2,  // 3: analogInTypeA.ConfigurationControlResponse.get:type_name -> analogInTypeA.ConfigurationControlSetResponse
	6,  // 4: analogInTypeA.FunctionControlGet.single:type_name -> analogInTypeA.GetSingle
	7,  // 5: analogInTypeA.FunctionControlGet.all:type_name -> analogInTypeA.GetAll
	16, // 6: analogInTypeA.GetAllResponse.samples:type_name -> analogInTypeA.Sample
	16, // 7: analogInTypeA.GetSingleResponse.sample:type_name -> analogInTypeA.Sample
	13, // 8: analogInTypeA.FunctionControlResponse.getSingle:type_name -> analogInTypeA.GetSingleResponse
	12, // 9: analogInTypeA.FunctionControlResponse.getAll:type_name -> analogInTypeA.GetAllResponse
	11, // 10: analogInTypeA.FunctionControlResponse.setSingle:type_name -> analogInTypeA.SetSingleResponse
	10, // 11: analogInTypeA.FunctionControlResponse.setAll:type_name -> analogInTypeA.SetAllResponse
	16, // 12: analogInTypeA.StreamData.samples:type_name -> analogInTypeA.Sample
	13, // [13:13] is the sub-list for method output_type
	13, // [13:13] is the sub-list for method input_type
	13, // [13:13] is the sub-list for extension type_name
	13, // [13:13] is the sub-list for extension extendee
	0,  // [0:13] is the sub-list for field type_name
}

func init() { file_analogInTypeA_proto_init() }
func file_analogInTypeA_proto_init() {
	if File_analogInTypeA_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_analogInTypeA_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationSampleRate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analogInTypeA_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationControlSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analogInTypeA_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationControlSetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analogInTypeA_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationControlGet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analogInTypeA_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationControlGetResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analogInTypeA_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigurationControlResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analogInTypeA_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSingle); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analogInTypeA_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAll); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analogInTypeA_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FunctionControlGet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analogInTypeA_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FunctionControlSet); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analogInTypeA_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetAllResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analogInTypeA_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetSingleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analogInTypeA_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetAllResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analogInTypeA_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetSingleResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analogInTypeA_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FunctionControlResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analogInTypeA_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamControlStart); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analogInTypeA_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sample); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_analogInTypeA_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_analogInTypeA_proto_msgTypes[5].OneofWrappers = []interface{}{
		(*ConfigurationControlResponse_Set)(nil),
		(*ConfigurationControlResponse_Get)(nil),
	}
	file_analogInTypeA_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*FunctionControlGet_Single)(nil),
		(*FunctionControlGet_All)(nil),
	}
	file_analogInTypeA_proto_msgTypes[14].OneofWrappers = []interface{}{
		(*FunctionControlResponse_GetSingle)(nil),
		(*FunctionControlResponse_GetAll)(nil),
		(*FunctionControlResponse_SetSingle)(nil),
		(*FunctionControlResponse_SetAll)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_analogInTypeA_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_analogInTypeA_proto_goTypes,
		DependencyIndexes: file_analogInTypeA_proto_depIdxs,
		MessageInfos:      file_analogInTypeA_proto_msgTypes,
	}.Build()
	File_analogInTypeA_proto = out.File
	file_analogInTypeA_proto_rawDesc = nil
	file_analogInTypeA_proto_goTypes = nil
	file_analogInTypeA_proto_depIdxs = nil
}
